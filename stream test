import pyaudio
import wave
import threading
from http.server import BaseHTTPRequestHandler, HTTPServer
import time

# Konfiguration für HTTP-Server
HOST_NAME = 'localhost'
PORT_NUMBER = 8080

# Konfiguration für das Audio-Streaming
CHUNK = 1024
FORMAT = pyaudio.paInt16
CHANNELS = 2
RATE = 44100

# Datei, die für das Audio-Streaming verwendet wird
AUDIO_FILE = 'media/rain.mp3'

class AudioStreamer:
    def __init__(self):
        self.playing = False

    def start_streaming(self):
        self.playing = True
        self.p = pyaudio.PyAudio()
        self.stream = self.p.open(format=FORMAT,
                                  channels=CHANNELS,
                                  rate=RATE,
                                  output=True)
        wf = wave.open(AUDIO_FILE, 'rb')
        data = wf.readframes(CHUNK)
        while data != b'' and self.playing:
            self.stream.write(data)
            data = wf.readframes(CHUNK)
        wf.close()
        self.stream.stop_stream()
        self.stream.close()
        self.p.terminate()

    def stop_streaming(self):
        self.playing = False

audio_streamer = AudioStreamer()

class AudioStreamHandler(BaseHTTPRequestHandler):
    def do_GET(self):
        if self.path == '/audio_stream':
            self.send_response(200)
            self.send_header('Content-type', 'audio/mpeg')
            self.end_headers()
            audio_thread = threading.Thread(target=audio_streamer.start_streaming)
            audio_thread.start()

def run(server_class=HTTPServer, handler_class=AudioStreamHandler, port=PORT_NUMBER):
    server_address = (HOST_NAME, port)
    httpd = server_class(server_address, handler_class)
    print(f"Starting HTTP server on {HOST_NAME}:{port}")
    httpd.serve_forever()

if __name__ == '__main__':
    run()
